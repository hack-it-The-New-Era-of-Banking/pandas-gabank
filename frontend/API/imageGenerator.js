import axios from 'axios';
import React, { useState } from 'react';
import { View, Text, TextInput, Button, Image, StyleSheet } from 'react-native';

const modelId = 'gemini-2.0-flash-exp-image-generation'; // Model for image generation
const apiKey = process.env.EXPO_PUBLIC_GEMINI_API_KEY; // Ensure this is set in your .env file
const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${modelId}:generateContent?key=${apiKey}`;

/**
 * Fetches an image generated by the Gemini API based on the input text.
 * @param {string} input - The text prompt for the image generation.
 * @returns {Promise<string>} - The base64-encoded string of the generated image.
 */
export const fetchGeneratedImage = async (input) => {
  try {
    const requestBody = {
      contents: [
        {
          role: 'user',
          parts: [
            {
              text: input, // The text prompt for the image
            },
          ],
        },
      ],
      generationConfig: {
        responseModalities: ['image', 'text'], // Specify both image and text response
        responseMimeType: 'text/plain', // Ensure the correct MIME type
      },
    };

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/${modelId}:streamGenerateContent?key=${apiKey}`,
      requestBody,
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    console.log('API Response:', response.data);

    // Extract the image data from the response
    const imageData = response.data.candidates?.[0]?.parts?.[0]?.inlineData?.data;

    if (!imageData) {
      throw new Error('No image data received from the API.');
    }

    return `data:image/png;base64,${imageData}`; // Return the image as a base64-encoded string
  } catch (error) {
    console.error('Error fetching generated image from Gemini API:', error);
    throw new Error('Error generating image from the AI.');
  }
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  input: {
    width: '100%',
    padding: 8,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 4,
    marginBottom: 16,
  },
  error: {
    color: 'red',
    marginTop: 8,
  },
  image: {
    width: 300,
    height: 300,
    marginTop: 16,
  },
});

